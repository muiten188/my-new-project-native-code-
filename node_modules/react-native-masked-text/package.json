{
  "_args": [
    [
      {
        "raw": "react-native-masked-text@^1.6.5",
        "scope": null,
        "escapedName": "react-native-masked-text",
        "name": "react-native-masked-text",
        "rawSpec": "^1.6.5",
        "spec": ">=1.6.5 <2.0.0",
        "type": "range"
      },
      "C:\\Users\\muite\\Documents\\my-new-project-native-code-3"
    ]
  ],
  "_from": "react-native-masked-text@>=1.6.5 <2.0.0",
  "_id": "react-native-masked-text@1.6.5",
  "_inCache": true,
  "_location": "/react-native-masked-text",
  "_nodeVersion": "8.7.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-native-masked-text-1.6.5.tgz_1513115979626_0.5105022459756583"
  },
  "_npmUser": {
    "name": "benhurott",
    "email": "ben-hur@outlook.com"
  },
  "_npmVersion": "5.5.1",
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-native-masked-text@^1.6.5",
    "scope": null,
    "escapedName": "react-native-masked-text",
    "name": "react-native-masked-text",
    "rawSpec": "^1.6.5",
    "spec": ">=1.6.5 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/react-native-masked-text/-/react-native-masked-text-1.6.5.tgz",
  "_shasum": "991b6701bacfff647d70b216ccbe1bc87af0b8b8",
  "_shrinkwrap": null,
  "_spec": "react-native-masked-text@^1.6.5",
  "_where": "C:\\Users\\muite\\Documents\\my-new-project-native-code-3",
  "author": {
    "name": "Ben-hur Santos Ott"
  },
  "bugs": {
    "url": "https://github.com/benhurott/react-native-masked-text/issues"
  },
  "dependencies": {
    "moment": "^2.19.1",
    "tinymask": "^1.0.2"
  },
  "description": "Text and TextInput with mask for React Native applications",
  "devDependencies": {
    "babel-cli": "^6.26.0",
    "babel-preset-react-native": "^1.9.1",
    "jest": "^19.0.2",
    "rimraf": "^2.6.2"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-GDzl91ikaMuOWuzDqogUogkAQFk0wJQrzBU4YpQ3cxM7DfVd+3a4ADYKjgkrt8CoI04p0/5iinijVYHbBQTT4g==",
    "shasum": "991b6701bacfff647d70b216ccbe1bc87af0b8b8",
    "tarball": "https://registry.npmjs.org/react-native-masked-text/-/react-native-masked-text-1.6.5.tgz"
  },
  "gitHead": "56de29c81b4a7d4e920e11cdd3b3137ad3efe87d",
  "homepage": "https://github.com/benhurott/react-native-masked-text#readme",
  "keywords": [
    "mask",
    "text",
    "textinput",
    "react-native"
  ],
  "license": "ISC",
  "licenses": [
    {
      "type": "MIT",
      "url": "https://www.opensource.org/licenses/mit-license.php"
    }
  ],
  "main": "./dist/index.js",
  "maintainers": [
    {
      "name": "benhurott",
      "email": "benhur.ott@gmail.com"
    }
  ],
  "name": "react-native-masked-text",
  "optionalDependencies": {},
  "readme": "# react-native-masked-text\n\nThis is a simple masked text (normal text and input text) component for React-Native.\n\nThanks to [vanilla-masker](https://github.com/BankFacil/vanilla-masker) =).\nThanks to [moment](http://momentjs.com/) =).\n\n## Supported Versions\n\nReact-native: 0.32.0 or higher\n\n## Install\n\n`npm install react-native-masked-text --save`\n\n## Usage (TextInputMask)\n\n```jsx\nimport React, { Component } from 'react'\n\n// import the component\nimport { TextInputMask } from 'react-native-masked-text'\n\nexport default class MyComponent extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t}\n\n\tisValid() {\n\t\t// isValid method returns if the inputed value is valid.\n\t\t// Ex: if you input 40/02/1990 30:20:20, it will return false\n\t\t//\t   because in this case, the day and the hour is invalid.\n\t\tlet valid = this.refs['myDateText'].isValid()\n\n\t\t// get converted value. Using type=datetime, it returns the moment object.\n\t\t// If it's using type=money, it returns a Number object.\n\t\tlet rawValue = this.refs['myDateText'].getRawValue()\n\t}\n\n\trender() {\n\t\t// the type is required but options is required only for some specific types.\n\t\treturn (\n\t\t\t<TextInputMask\n\t\t\t\tref={'myDateText'}\n\t\t\t\ttype={'datetime'}\n\t\t\t\toptions={{\n\t\t\t\t\tformat: 'DD-MM-YYYY HH:mm:ss'\n\t\t\t\t}}\n\t\t\t/>\n\t\t)\n\t}\n}\n```\n\n### Props\n\n#### type\n\n_credit-card_: use the mask 9999 9999 9999 9999. It accepts options (see later in this doc). <br />\n_cpf_: use the mask `999.999.999-99` and `numeric` keyboard. <br />\n_cnpj_: use the mask `99.999.999/9999-99` and `numeric` keyboard. <br />\n_zip-code_: use the mask `99999-999` and `numeric` keyboard. <br />\n_only-numbers_: accept only numbers on field with `numeric` keyboard. <br />\n_money_: use the mask `R$ 0,00` on the field with `numeric` keyboard. It accepts options (see later in this doc). <br />\n_cel-phone_: use the mask `(99) 9999-9999` or `(99) 99999-9999` (changing automaticaly by length). It accepts options (see later in this doc). <br />\n_datetime_: use datetime mask with moment format (default DD/MM/YYYY HH:mm:ss). It accepts options (see later in this doc). <br />\n_custom_: use your custom mask (see the options props later in this doc). <br />\n\n#### onChangeText\n\nInvoked after new value applied to mask.\n\n```jsx\n/**\n * @param {String} text the text AFTER mask is applied.\n*/\nonChangeText(text) {\n\t// ...\n}\n\n<TextInputMask\n\ttype={'only-numbers'}\n\tonChangeText={this.onChangeText.bind(this)} />\n```\n\n#### checkText\n\nAllow you to check and prevent value to be inputed.\n\n```jsx\n/**\n * @param {String} previous the previous text in the masked field.\n * @param {String} next the next text that will be setted to field.\n * @return {Boolean} return true if must accept the value.\n*/\ncheckText(previous, next) {\n\treturn next === 'your valid value or other boolean condition';\n}\n\n<TextInputMask\n\ttype={'only-numbers'}\n\tcheckText={this.checkText.bind(this)} />\n```\n\n#### customTextInput\n\nYou can use this prop if you want custom text input instead native TextInput component:\n\n```jsx\nconst Textfield = MKTextField.textfield()\n\t.withPlaceholder('Text...')\n\t.withStyle(styles.textfield)\n\t.build()\n\n;<TextInputMask\n\tref={'myDateText'}\n\ttype={'money'}\n\tstyle={styles.input}\n\tcustomTextInput={Textfield}\n\tplaceholder=\"Enter text to see events\"\n/>\n```\n\n#### customTextInputProps\n\nSome custom inputs like [react-native-textinput-effects](https://github.com/halilb/react-native-textinput-effects) have to set properties in mount time. For these types of components we use this property.\n\n```jsx\nimport React from 'react'\nimport { StyleSheet, View } from 'react-native'\n\nimport { TextInputMask } from 'react-native-masked-text'\nimport { Kaede } from 'react-native-textinput-effects'\n\nexport default class App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\n\t\tthis.state = {\n\t\t\tbirthday: ''\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<View style={styles.container}>\n\t\t\t\t<TextInputMask\n\t\t\t\t\tref={'myDateText'}\n\t\t\t\t\t// here we set the custom component and their props.\n\t\t\t\t\tcustomTextInput={Kaede}\n\t\t\t\t\tcustomTextInputProps={{\n\t\t\t\t\t\tstyle: { width: '80%' },\n\t\t\t\t\t\tlabel: 'Birthday'\n\t\t\t\t\t}}\n\t\t\t\t\ttype={'datetime'}\n\t\t\t\t\toptions={{\n\t\t\t\t\t\tformat: 'DD-MM-YYYY HH:mm:ss'\n\t\t\t\t\t}}\n\t\t\t\t\t// don't forget: the value and state!\n\t\t\t\t\tonChangeText={birthday => this.setState({ birthday })}\n\t\t\t\t\tvalue={this.state.birthday}\n\t\t\t\t/>\n\t\t\t</View>\n\t\t)\n\t}\n}\n\nconst styles = StyleSheet.create({\n\tcontainer: {\n\t\tflex: 1,\n\t\tbackgroundColor: '#fff',\n\t\talignItems: 'center',\n\t\tjustifyContent: 'center'\n\t}\n})\n```\n\n#### TextInput Props\n\nYou can use the native props of TextInput, with this in mind:\n\n* onChangeText is intercepted by component.\n* value is intercepted by component.\n* if you pass keyboardType, it will override the keyboardType of masked component.\n\n#### TextInput Methods\n\nIf you want to use the methods of the native TextInput, use the `getElement()` method:\n\n```jsx\nexport default class App extends React.Component {\n\tonGoFocus() {\n\t\t// when you call getElement method, the instance of native TextInput will returned.\n\t\tthis.refs['myText'].getElement().focus()\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<View style={styles.container}>\n\t\t\t\t<View>\n\t\t\t\t\t<TextInputMask\n\t\t\t\t\t\tref=\"myText\"\n\t\t\t\t\t\ttype={'only-numbers'}\n\t\t\t\t\t\tstyle={styles.input}\n\t\t\t\t\t/>\n\t\t\t\t</View>\n\t\t\t\t<View>\n\t\t\t\t\t<Button\n\t\t\t\t\t\tonPress={this.onGoFocus.bind(this)}\n\t\t\t\t\t\ttitle=\"Go Focus Hue\"\n\t\t\t\t\t\tcolor=\"#841584\"\n\t\t\t\t\t/>\n\t\t\t\t</View>\n\t\t\t</View>\n\t\t)\n\t}\n}\n```\n\n#### Options\n\nSome types accept options, use it like this: `<TextInputMask type={'money'} options={{ unit: 'US$' }} />`\n\n**For `type={'money'}`** <br />\n\n* _options={...}_\n  _ `precision` (Number, default 2): the decimal places.\n  _ `separator` (String, default ','): the decimal separator.\n  _ `delimiter` (String, default '.'): the thousand separator.\n  _ `unit`: (String, default 'R$'): the prefix text.\n  _ `suffixUnit` (String, default ''): the suffix text.\n  _ `zeroCents` (Boolean, default false): if must show cents.\n\n**For `type={'cel-phone'}`** <br />\n\n* _options={...}_\n  _ `withDDD` (Boolean, default true): if the ddd will be include in the mask.\n  _ `dddMask` (String, default '(99) '): the default mask applied if `withDDD` is true.\n\n**For `type={'datetime'}`** <br />\n\n* _options={...}_\n  _ `format` (String, default DD/MM/YYYY HH:mm:ss): moment date format. It accepts the following:\n  _ DD/MM/YYYY HH:mm:ss\n  _ DD/MM/YYYY\n  _ MM/DD/YYYY\n  _ YYYY/MM/DD\n  _ HH:mm:ss\n  _ HH:mm\n  _ HH \\* _You can use all of dates with `-` instead of `/` if you want_\n\n**For `type={'custom'}`** <br />\n\n* _options={...}_\n\n```jsx\n{\n\t/**\n\t * mask: (String | required | default '')\n\t * the mask pattern\n\t * 9 - accept digit.\n\t * A - accept alpha.\n\t * S - accept alphanumeric.\n\t * * - accept all, EXCEPT white space.\n\t*/\n\tmask: '999#AAA',\n\n\t/**\n\t * validator: (Function | optional | defaults returns true)\n\t * use this funcion to inform if the inputed value is a valid value (for invalid phone numbers, for example). The isValid method use this validator.\n\t*/\n\tvalidator: function(value, settings) {\n\t\treturn true\n\t},\n\t/**\n\t * getRawValue: (Function | optional | defaults return current masked value)\n\t * use this function to parse and return values to use what you want.\n\t * for example, if you want to create a phone number mask (999) 999-99-99 but want to get only\n\t * the numbers for value, use this method for this parse step.\n\t*/\n\tgetRawValue: function(value, settings) {\n\t\treturn 'my converted value';\n\t},\n\t/**\n\t * translation: (Object | optional | defaults 9, A, S, *)\n\t * the dictionary that translate mask and value.\n\t * you can change defaults by simple override the key (9, A, S, *) or create some new.\n\t*/\n\ttranslation: {\n\t\t// this is a custom translation. The others (9, A, S, *) still works.\n\t\t// this translation will be merged and turns into 9, A, S, *, #.\n\t\t'#': function(val) {\n\t\t\tif (val === ' ') {\n\t\t\t\treturn val;\n\t\t\t}\n\n\t\t\t// if returns null, undefined or '' (empty string), the value will be ignored.\n\t\t\treturn null;\n\t\t},\n\t\t// in this case, we will override build-in * translation (allow all characters)\n\t\t// and set this to allow only blank spaces and some special characters.\n\t\t'*': function(val) {\n\t\t\treturn [' ', '#', ',', '.', '!'].indexOf(val) >= 0 ? val : null;\n\t\t}\n\t}\n}\n```\n\n**For `type={'credit-card'}`** <br />\n\n* _options={...}_ \\* `obfuscated` (Boolean, default false): if the mask must be `9999 **** **** 9999`\n\n### Methods\n\n* `getElement()`: return the instance of _TextInput_ component.\n* `isValid()`: if the value inputed is valid for the mask. \\* _credit-card_: return true if the mask is complete. \\* _cpf_: return true if the mask is complete and cpf is valid. \\* _cnpj_: return true if the mask is complete and cnpj is valid. \\* _zip-code_: return true if the mask is complete. \\* _only-numbers_: always returns true. \\* _money_: always returns true. \\* _cel-phone_: return true if the mask is complete. \\* _datetime_: return true if the date value is valid for format. \\* _custom_: use custom validation, if it not exist, always returns true.\n* `getRawValue()`: get the converted value of mask. \\* _credit-card_: return the array with the value parts. Ex: `1234 1234 1234 1234` returns `[1234, 1234, 1234, 1234]`. \\* _cpf_: return the value without mask. \\* _cnpj_: return the value without mask. \\* _zip-code_: return the value without mask. \\* _only-numbers_: return the value without mask. \\* _money_: return the Number value. Ex: `R$ 1.234,56` returns `1234.56`. \\* _cel-phone_: return the value without mask. \\* _datetime_: return the `moment` object for the date and format. \\* _custom_: use custom method (passed in options). If it not exists, returns the current value.\n\n## Usage (TextMask)\n\n```jsx\nimport React, { Component } from 'react'\n\n// import the component\nimport { TextMask } from 'react-native-masked-text'\n\nexport default class MyComponent extends Component {\n\tconstructor(props) {\n\t\tsuper(props)\n\t\tthis.state = {\n\t\t\ttext: '4567123409871234'\n\t\t}\n\t}\n\n\trender() {\n\t\t// the type is required but options is required only for some specific types.\n\t\t// the sample below will output 4567 **** **** 1234\n\t\treturn (\n\t\t\t<TextMask\n\t\t\t\tvalue={this.state.text}\n\t\t\t\ttype={'credit-card'}\n\t\t\t\toptions={{\n\t\t\t\t\tobfuscated: true\n\t\t\t\t}}\n\t\t\t/>\n\t\t)\n\t}\n}\n```\n\n### Props\n\nThe same of _TextInputMask_, but for React-Native _Text_ component instead _TextInput_.\n<br />\n_Warning_: if the value not match the mask, it will not appear.\n\n### Methods\n\n`getElement()`: return the instance of _Text_ component.\n\n## Extra (MaskService)\n\nIf you want, we expose the `MaskService`. You can use it:\n\n**Methods**\n\n* static toMask(type, value, settings): mask a value.\n  _ `type` (String, required): the type of the mask (`cpf`, `datetime`, etc...)\n  _ `value` (String, required): the value to be masked \\* `settings` (Object, optional): if the mask type accepts options, pass it in the settings parameter\n* static isValid(type, value, settings): validate if the mask and the value match.\n  _ `type` (String, required): the type of the mask (`cpf`, `datetime`, etc...)\n  _ `value` (String, required): the value to be masked \\* `settings` (Object, optional): if the mask type accepts options, pass it in the settings parameter\n\nEx:\n\n```jsx\nimport { MaskService } from 'react-native-masked-text'\n\nvar money = MaskService.toMask('money', '123', {\n\tunit: 'US$',\n\tseparator: '.',\n\tdelimiter: ','\n})\n\n// money -> US$ 1.23\n```\n\n## Throubleshooting\n\n* If the `es2015` error throw by babel, try run `react-native start --reset-cache`\n\n# Changelog\n\n## 1.6.5\n\n* Fixing validation for CPF and CNPJ when empty string is inputed.\n\n## 1.6.4\n\n* Fixing wrong format when use money mask and values with only one decimal place (`1.9`) (thanks to [Pablo](https://github.com/rochapablo)).\n\n## 1.6.3\n\n* Fixing moment version (thanks to [Edward Coleridge Smith](https://github.com/edcs))\n* Adding pre-builded lib to improve build phase (thanks to [Giorgi Bagdavadze](https://github.com/notgiorgi))\n\n## 1.6.2\n\n* Fixing custom mask when removing value in middle of the text. (thanks to [Aleksandr Kompaniets](https://github.com/Oxyaction))\n  _ KNOW ISSUE: the custom mask is not allowing user to input white spaces for `_` translation temporarily.\n\n## 1.6.1\n\n* Fixing duplicated custom text input component. (thanks to [Pablo](https://github.com/rochapablo))\n\n## 1.6.0\n\n* Add compatibility to [react-native-textinput-effects](https://github.com/halilb/react-native-textinput-effects) by using `customTextInputProps` (thanks to [Pablo](https://github.com/rochapablo))\n\n## 1.5.3\n\n* Fix suffix backspace (thanks to [Thomas Kekeisen](https://github.com/blaues0cke))\n* Fix last character on custom mask (thanks to [Daniel Maly](https://github.com/DanielMaly))\n\n## 1.5.2\n\n* Adding `keyboardType` to custom mask. (thanks to [Nurbek Abulgazin](https://github.com/nurbek-ab))\n\n## 1.5.1\n\n* Adding `tinymask` to fix some custom mask issues.\n\n## 1.5.0\n\n* Adding new and powerfull `custom` engine mask \\m/.\n\n## 1.4.0\n\n* Adding `customTextInput` to allow other inputs instead native TextInput. (thanks to [Hellon Canella](https://github.com/helloncanella))\n\n## 1.3.4\n\n* Remove default value from mask to allow placeholder on text-input (thanks to [Cuong Hoang](https://github.com/cuonghv91)). \\* Please, caution. This can cause some runtime breaking if you update to this version.\n\n## 1.3.3\n\n* Update dependencies (thanks to [Vlad-Zhukov](https://github.com/Vlad-Zhukov))\n\n## 1.3.2\n\n* Fix: ignoring Jet Brains ide files (thanks to [Vlad-Zhukov](https://github.com/Vlad-Zhukov))\n\n## 1.3.1\n\n* Performance: adding check if the next value to be applied to the mask is equal as actual and prevent state change.\n\n## 1.3.0\n\n* Feat: now you can check and prevent input text on `TextInputMask` using `checkText` prop.\n\n## 1.2.2\n\n* Fix: fixing es2015 preset (thanks to [vagnercsouza](https://github.com/vagnercsouza), [barakcoh](https://github.com/barakcoh), Marvin Santos)\n\n## 1.2.1\n\n* Fix: fixing white space after unit on money mask.\n\n## 1.2.0\n\n* Adding `getRawValue`.\n\n## 1.1.1\n\n* Fixing toolbox-service reference (thanks to [ziftinpeki](https://github.com/ziftinpeki)).\n\n## 1.1.0\n\n* Adding credit-card mask.\n* Refactoring base mask to contain helpfull functions.\n\n## 1.0.0\n\n* Adding datetime and cnpj masks.\n* [Breaking Change] Refactoring MaskService.\n* Separate mask handlers for better extensibility.\n* Adding tests for all mask handlers.\n* Refactoring Components for use new mask handlers.\n\n## 0.3.6\n\n* Fix vanilla-mask path on windows.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/benhurott/react-native-masked-text.git"
  },
  "scripts": {
    "build": "babel ./index.js ./lib/*.js ./lib/**/*.js -d ./dist",
    "clean": "rimraf dist",
    "prepublish": "npm run clean && npm run build",
    "test": "jest"
  },
  "version": "1.6.5"
}
